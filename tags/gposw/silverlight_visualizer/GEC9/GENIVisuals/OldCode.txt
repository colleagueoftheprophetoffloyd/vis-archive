        // ******************* Commented out old code that might be useful some day.
        //
        // Make a new storyboard to animate status display.
        //
        //private void UpdateStoryboard(Visual vis)
        //{
        //    VisualElements info = elements[vis];
        //    if (info == null)
        //        return;
        //    Storyboard oldSb = info.GetProperty(VisualElements.StoryboardProperty) as Storyboard;
        //    List<UIElement> oldElementList = info.GetProperty(VisualElements.AnimationElementsProperty) as List<UIElement>;
        //    StatusInfo statusInfo = info.GetProperty(VisualElements.StatusProperty) as StatusInfo;
        //    string status = "";
        //    if (statusInfo != null)
        //        status = statusInfo.Status;


        //    // *** Experiment
        //    if (updatedVisualTypes.Contains(vis.infoType))
        //    {
        //        VisualControl control = elements[vis].GetProperty(VisualElements.StatusAnimationTargetProperty) as VisualControl;
        //        control.CurrentStatus = status;
        //        return;
        //    }
        //    // *** End experimental section


        //    // Clear out any existing animation.
        //    info.ClearProperty(VisualElements.StoryboardProperty);
        //    info.ClearProperty(VisualElements.AnimationElementsProperty);
        //    if (oldSb != null)
        //        oldSb.Stop();
        //    if (oldElementList != null)
        //        foreach (UIElement element in oldElementList)
        //            OverlayLayer.Children.Remove(element);



        //    // Build new animation.
        //    // This cries out for refactoring.
        //    Storyboard newSb = null;
        //    List<UIElement> newElementList = null;
        //    if (status == "alert")
        //    {
        //        newSb = new Storyboard();

        //        // Build an animation.
        //        ColorAnimation animation = new ColorAnimation();
        //        animation.Duration = new Duration(TimeSpan.FromSeconds(0.2));
        //        animation.From = Colors.LightGray;
        //        animation.To = Colors.Red;
        //        animation.AutoReverse = true;
        //        animation.RepeatBehavior = RepeatBehavior.Forever;
        //        animation.FillBehavior = FillBehavior.Stop; // Does this mean anything, given above line?

        //        // Attach to storyboard.
        //        newSb.Children.Add(animation);

        //        // Attach to control
        //        UIElement control = elements[vis].GetProperty(VisualElements.StatusAnimationTargetProperty) as UIElement;
        //        if (control != null)
        //        {
        //            Storyboard.SetTarget(animation, control);
        //            Storyboard.SetTargetProperty(animation, new PropertyPath("(Background).(SolidColorBrush.Color)"));
        //        }
        //    }
        //    else if (status == "rainbow")
        //    {
        //        newSb = new Storyboard();

        //        // Build an animation.
        //        ColorAnimation animation = new ColorAnimation();
        //        animation.Duration = new Duration(TimeSpan.FromSeconds(0.5));
        //        animation.From = Colors.Red;
        //        animation.To = Colors.Purple;
        //        animation.AutoReverse = false;
        //        animation.RepeatBehavior = RepeatBehavior.Forever;
        //        animation.FillBehavior = FillBehavior.Stop; // Does this mean anything, given above line?

        //        // Attach to storyboard.
        //        newSb.Children.Add(animation);

        //        // Attach to control
        //        UIElement control = elements[vis].GetProperty(VisualElements.StatusAnimationTargetProperty) as UIElement;
        //        if (control != null)
        //        {
        //            Storyboard.SetTarget(animation, control);
        //            Storyboard.SetTargetProperty(animation, new PropertyPath("(Background).(SolidColorBrush.Color)"));
        //        }
        //    }
        //    else if (status == "throb")
        //    {
        //        newSb = new Storyboard();

        //        // Build an animation.

        //        //DoubleAnimation animation = Application.Current.Resources["ThrobAnimation"] as DoubleAnimation;
        //        DoubleAnimation animation = new DoubleAnimation();
        //        animation.Duration = new Duration(TimeSpan.FromSeconds(0.2));
        //        animation.From = 1.0;
        //        animation.To = 0.0;
        //        animation.AutoReverse = true;
        //        animation.RepeatBehavior = RepeatBehavior.Forever;
        //        animation.FillBehavior = FillBehavior.Stop; // Does this mean anything, given above line?


        //        // Attach to storyboard.
        //        newSb.Children.Add(animation);

        //        // Attach to control
        //        UIElement control = elements[vis].GetProperty(VisualElements.StatusAnimationTargetProperty) as UIElement;
        //        if (control != null)
        //        {
        //            Storyboard.SetTarget(animation, control);
        //            Storyboard.SetTargetProperty(animation, new PropertyPath("Opacity"));
        //        }
        //    }
        //    else if ((vis.objType == "link") &&
        //             (vis.infoType == "arc") &&
        //             ((status == "forward") || (status == "backward") || (status == "both")))
        //    {
        //        newSb = new Storyboard();
        //        newElementList = new List<UIElement>();

        //        if ((status == "forward") || (status == "both"))
        //        {
        //            List<UIElement> balls = MakeBalls(newSb, vis, "forward");
        //            foreach (UIElement ball in balls)
        //                newElementList.Add(ball);
        //        }

        //        if ((status == "backward") || (status == "both"))
        //        {
        //            List<UIElement> balls = MakeBalls(newSb, vis, "backward");
        //            foreach (UIElement ball in balls)
        //                newElementList.Add(ball);
        //        }
        //    }

        //    // Start storyboard and remember for later cleanup.
        //    if (newSb != null)
        //    {
        //        info.SetProperty(VisualElements.StoryboardProperty, newSb);
        //        if (newElementList != null)
        //            info.SetProperty(VisualElements.AnimationElementsProperty,
        //                             newElementList);
        //        newSb.Begin();
        //    }
        //}


        //
        // Build an animation that follows the arc of the specified polyline.
        // Shift points by the specified offset (for centering).
        // If direction is "backward" then follow the arc backward.
        //
        //private PointAnimationUsingKeyFrames ArcAnimation(MapPolyline pl, Point offset, string direction)
        //{
        //    PointAnimationUsingKeyFrames animation = new PointAnimationUsingKeyFrames();
        //    animation.Duration = new Duration(TimeSpan.FromMilliseconds(2000.0));
        //    animation.AutoReverse = false;
        //    animation.RepeatBehavior = RepeatBehavior.Forever;
        //    animation.FillBehavior = FillBehavior.Stop;

        //    IEnumerable<Location> locations = pl.Locations;
        //    if (direction == "backward")
        //        locations = pl.Locations.Reverse();

        //    // One key frame for each segment(skip first point).
        //    Point startPoint = sliceMap.LocationToViewportPoint(locations.First());
        //    int numPoints = pl.Locations.Count();
        //    double frameDuration = 2000.0 / Convert.ToDouble(numPoints - 1);

        //    for (int index = 0; index < numPoints; index++)
        //    {
        //        Location loc = locations.ElementAt(index);
        //        LinearPointKeyFrame keyFrame = new LinearPointKeyFrame();
        //        animation.KeyFrames.Add(keyFrame);
        //        KeyTime time = KeyTime.FromTimeSpan(TimeSpan.FromMilliseconds(index * frameDuration));
        //        keyFrame.KeyTime = time;
        //        Point point = sliceMap.LocationToViewportPoint(loc);
        //        keyFrame.Value = new Point(point.X - startPoint.X + offset.X,
        //                                   point.Y - startPoint.Y + offset.Y);
        //    }
        //    return animation;

        //}


        ////
        //// Helper function for making balls for link animation.
        //// Return a list of created UI objects.
        ////
        //private List<UIElement> MakeBalls(Storyboard sb, Visual vis, string direction)
        //{
        //    List<UIElement> result = new List<UIElement>();
        //    MapPolyline pl = elements[vis].GetProperty(VisualElements.LinkPolyLineProperty) as MapPolyline;
        //    Location startLoc;

        //    if ((pl == null) || (pl.Locations == null) || (pl.Locations.Count() == 0))
        //        return null;

        //    if (direction == "backward")
        //        startLoc = pl.Locations.Last();
        //    else
        //        startLoc = pl.Locations.First();

        //    // Make moving balls
        //    Point offset = new Point(-5, -5); // Offset to center of balls
        //    for (int i = 0; i < 4; i++)
        //    {
        //        // Attach animation to storyboard.
        //        PointAnimationUsingKeyFrames animation = ArcAnimation(pl, offset, direction);
        //        animation.BeginTime = new TimeSpan(0, 0, 0, 0, 500 * i); // ms
        //        sb.Children.Add(animation);

        //        // Attach a moving ball.
        //        Ellipse ball = new Ellipse();
        //        ball.Fill = new SolidColorBrush(Colors.White);
        //        ball.Width = 10;
        //        ball.Height = 10;
        //        Storyboard.SetTarget(animation, ball);
        //        Storyboard.SetTargetProperty(animation, new PropertyPath(MapLayer.PositionOffsetProperty));
        //        OverlayLayer.AddChild(ball, startLoc, offset);
        //        result.Add(ball);

        //        //*** Experiment (delete me)
        //        if (false)
        //        {
        //            // Build an animation.
        //            ColorAnimation animation2 = new ColorAnimation();
        //            animation2.Duration = new Duration(TimeSpan.FromSeconds(2.0));
        //            animation2.From = Colors.Red;
        //            animation2.To = Colors.Blue;
        //            animation2.AutoReverse = false;
        //            animation2.RepeatBehavior = RepeatBehavior.Forever;
        //            sb.Children.Add(animation2);
        //            Storyboard.SetTarget(animation2, ball);
        //            Storyboard.SetTargetProperty(animation2, new PropertyPath("(Fill).(SolidColorBrush.Color)"));
        //        }
        //        //*** End experiment
        //    }
        //    return result;
        //}


        ////
        //// Make an arc to represent a link on map.
        ////
        //private MapPolyline MakeArc(Visual visual, string objType, string objName)
        //{
        //    // Only links have arcs.
        //    if (objType != "link")
        //    {
        //        ShowError(String.Format("Tried to make an arc for non-link object named {0} with type {1}.",
        //                                objName, objType));
        //        return null;
        //    }

        //    // Get link info.
        //    Link thisLink = links[objName];
        //    Node sourceNode = null;
        //    Node destNode = null;
        //    if (nodes.ContainsKey(thisLink.sourceNode))
        //        sourceNode = nodes[thisLink.sourceNode];
        //    else
        //    {
        //        ShowError(String.Format("Couldn't find source node {0} of link {1}.",
        //                  thisLink.sourceNode, objName));
        //        return null;
        //    }
        //    if (nodes.ContainsKey(thisLink.destNode))
        //        destNode = nodes[thisLink.destNode];
        //    else
        //    {
        //        ShowError(String.Format("Couldn't find destination node {0} of link {1}.",
        //                  thisLink.destNode, objName));
        //        return null;
        //    }
        //    Location sourceLoc = new Location(sourceNode.Latitude, sourceNode.Longitude);
        //    Location destLoc = new Location(destNode.Latitude, destNode.Longitude);
        //    if ((sourceLoc == null) || (destLoc == null))
        //    {
        //        ShowError(String.Format("Bad location(s) for endpoint(s) of link {0}.",
        //                                objName));
        //        return null;
        //    }

        //    // Build polyline.
        //    string renderAdvice = "";
        //    if (visual.renderAttributes.GetValue("arcShape") != null)
        //        renderAdvice = visual.renderAttributes.GetValue("arcShape").ToLower();
        //    MapPolyline pl = new MapPolyline();
        //    pl.Stroke = linkBrush;
        //    pl.StrokeThickness = 5;
        //    pl.Opacity = 0.5;
        //    int segs;
        //    double bendFactor, normalOffset;

        //    if ((renderAdvice == "cw") ||
        //        (renderAdvice == "clockwise"))
        //    {
        //        segs = 50;
        //        normalOffset = Math.PI / 2.0;
        //        bendFactor = 0.1;
        //    }
        //    else if ((renderAdvice == "ccw") ||
        //                (renderAdvice == "counterclockwise"))
        //    {
        //        segs = 50;
        //        normalOffset = -1.0 * Math.PI / 2.0;
        //        bendFactor = 0.1;
        //    }
        //    else
        //    {
        //        segs = 1;
        //        normalOffset = 0.0;
        //        bendFactor = 0.0;
        //    }

        //    LocationCollection arcPoints = new LocationCollection();
        //    Point sPoint = sliceMap.LocationToViewportPoint(sourceLoc);
        //    Point dPoint = sliceMap.LocationToViewportPoint(destLoc);
        //    double xDist = dPoint.X - sPoint.X;
        //    double yDist = dPoint.Y - sPoint.Y;
        //    double length = Math.Sqrt(xDist * xDist + yDist * yDist);
        //    double normalAngle = Math.Atan2(yDist, xDist) + normalOffset;
        //    double normalDist = bendFactor * length;
        //    for (int i = 0; i <= segs; i++)
        //    {
        //        double t = Convert.ToDouble(i) / Convert.ToDouble(segs);
        //        double offset = Math.Sin(Math.PI * t) * normalDist;
        //        Point interp = new Point(t * xDist + sPoint.X + offset * Math.Cos(normalAngle),
        //                                    t * yDist + sPoint.Y + offset * Math.Sin(normalAngle));
        //        arcPoints.Add(sliceMap.ViewportPointToLocation(interp));
        //    }
        //    pl.Locations = arcPoints;
        //    return pl;
        //}
        // ************* End old code that might be useful someday.
